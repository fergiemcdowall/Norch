{
  "swagger": "2.0",
  "info": {
    "description": "This is your Norch server. Add documents. Find them again.",
    "version": "1.0.5",
    "title": "Norch",
    "contact": {
      "email": "fergus@norch.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/fergiemcdowall/search-index/blob/master/LICENSE"
    }
  },
  "host": "localhost:3030",
  "basePath": "/",
  "tags": [
    {
      "name": "aggregation",
      "description": "Export and import indices",
    },

    {
      "name": "documents",
      "description": "Find and return documents",
    },
    
    {
      "name": "metadata",
      "description": "Get metadata about your index"
    },
    
    {
      "name": "linguistic",
      "description": "Get information about the tokens in the index",
    },
    
    {
      "name": "replication",
      "description": "Export and import indices",
    }
  ],
  
  "paths": {
    
    "/documents": {

      "post": {
        "tags": [
          "documents"
        ],
        "summary": "Add new documents",
        "description": "TODO...",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
        ],
        "parameters": [{
          "in": "body",
          "name": "documents",
          "description": "List of Document objects",
          "required": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Document"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },

      "get": {
        "tags": [
          "documents"
        ],
        "summary": "return specified documents",
        "description": "return specified documents",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "max number of documents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      },
      
      "delete": {
        "tags": [
          "documents"
        ],
        "summary": "delete documents",
        "description": "Delete documents from the index by id.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "doc",
            "in": "query",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "TODO"
          },
          "404": {
            "description": "TODO"
          }
        }
      }      
    },

    "/documents/all": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "return all documents",
        "description": "Return all documents",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "max number of documents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/documents/count": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "total number of documents",
        "description": "Total number of documents",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },    

    "/documents/query": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "query document index",
        "description": "TODO",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "query",
          "description": "a search query",
          "required": false,
          "type": "object"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },    

    "/documents/raw": {
      "post": {
        "tags": [
          "documents"
        ],
        "summary": "Adds raw documents",
        "description": "TODO...",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
    },

    
    "/aggregate/buckets": {
      "get": {
        "tags": [
          "aggregation"
        ],
        "summary": "return an aggregation of document ids",
        "description": "TODO: explain what a bucket is",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "q",
          "description": "specify buckets",
          "required": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Token"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/aggregate/facets": {
      "get": {
        "tags": [
          "aggregation"
        ],
        "summary": "return an aggregation of document ids",
        "description": "TODO: explain what a facet is",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "max number of documents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/linguistic/dictionary": {
      "get": {
        "tags": [
          "linguistic"
        ],
        "summary": "returns all tokens in the index",
        "description": "TODO: explain",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "max number of documents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/linguistic/distinct": {
      "get": {
        "tags": [
          "linguistic"
        ],
        "summary": "returns distinct tokens per field",
        "description": "TODO: explain (also, why is this different to dictionary)",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "max number of documents",
          "required": false,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/linguistic/max": {
      "get": {
        "tags": [
          "linguistic"
        ],
        "summary": "max alphabetical value per field",
        "description": "TODO: explain",
        "produces": [
          "text/plain"
        ],
      }
    },


    "/linguistic/min": {
      "get": {
        "tags": [
          "linguistic"
        ],
        "summary": "min alphabetical value per field",
        "description": "TODO: explain",
        "produces": [
          "text/plain"
        ],
      }
    },

    
    
    "/meta/created": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "timestamp of when the index was created",
        "description": "TODO: explain",
        "produces": [
          "plain/text"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },

    "/meta/last-updated": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "timestamp of when the index was last updated",
        "description": "TODO: explain",
        "produces": [
          "plain/text"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      }
    },


    "/replicate": {

      "get": {
        "tags": [
          "replication"
        ],
        "summary": "export the index",
        "description": "TODO: explain",
        "produces": [
          "plain/text"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Resultset"
            }
          }
        }
      },

      "post": {
        "tags": [
          "replication"
        ],
        "summary": "import an index",
        "description": "TODO...",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },

    },



    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },

    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },

    },
    
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
    
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "definitions": {

    "Document": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "note": "if _id id not provided, an _id field will be automatically generated"
        },
        "otherFields": {
          "type": "string",
          "note": "every object can contain an arbitrary number of fields"
        }
      }
    },

    "Token": {
      "type": "object",
      "properties": {
        "FIELD": {
          "type": "string",
          "note": "if no FIELD is specified, then VALUE will match in all fields, VALUE can also be expressed as a string"
        },
        "VALUE": {
          "type": "object",
          "properties": {
            "GTE": {
              "type": "string"
            },
            "LTE": {
              "type": "string"
            }
          }
        }
      }
    },

    
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
              "name": "photoUrl"
            }
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "xml": {
              "name": "tag"
            },
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}

